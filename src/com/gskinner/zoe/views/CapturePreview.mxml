<?xml version="1.0" encoding="utf-8"?>
<!--
ZoÃ« by gskinner.com.
Visit www.gskinner.com/blog for documentation, updates and more free code.

Copyright (c) 2010 Grant Skinner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->

<!---

	The view used to display the loaded swf, and its capture bounds.

-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="init()"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 resize="handleResize()" width="100%" height="100%"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.gskinner.zoe.events.CaptureEvent;
			import com.gskinner.zoe.model.FileModel;
			
			import flash.desktop.NativeApplication;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;
			
			import mx.controls.Alert;
			import mx.core.FlexBitmap;
			import mx.core.UIComponent;
			
			/**
			 * @private
			 * 
			 */
			[Embed(source="../../../../assets/4x4Grid.png")]
			protected var alphaGrid:Class;
			
			/**
			 * @private
			 * 
			 */
			protected const MOVE:String = 'move';
			
			/**
			 * @private
			 * 
			 */
			protected const RESIZE:String = 'resize';
			
			/**
			 * @private
			 * 
			 */
			protected const MIN_WIDTH:uint = 25;
			
			/**
			 * @private
			 * 
			 */
			protected const MIN_HEIGHT:uint = 25;
			
			/**
			 * @private
			 * 
			 */
			protected var dragOffset:Point;
			
			/**
			 * @private
			 * 
			 */
			protected var resizeStartPoint:Point;
			
			/**
			 * @private
			 * 
			 */
			protected var dragMode:String;
			
			/**
			 * @private
			 * 
			 */
			protected var alphaGridBitmap:BitmapData;
			
			/**
			 * @private
			 * 
			 */
			protected var _registrationPoint:Point;
			
			/**
			 * @private
			 * 
			 */
			protected var _source:String;
			
			/**
			 * @private
			 * 
			 */
			protected var _captureBounds:Rectangle;
			
			/**
			 * @private
			 * 
			 */
			protected var _backgroundColor:int = -1;
			
			/**
			 * @private
			 * 
			 */
			protected var _showGrid:Boolean = true;
			
			/**
			 * @private
			 * 
			 */
			public var fileModel:FileModel;
			
			/**
			 * @private
			 * 
			 */
			public var maskContainer:Sprite;
			
			/**
			 * @private
			 * 
			 */
			protected function init():void {
				alphaGridBitmap = (new alphaGrid() as FlexBitmap).bitmapData;
				
				dragOffset = new Point();
				resizeStartPoint = new Point();
				
				maskContainer = new Sprite();
				var cont:UIComponent = new UIComponent();
				cont.addChild(maskContainer);
				var g:Graphics = maskContainer.graphics;
				g.clear();
				
				g.beginFill(0xFF0099, 1);
				g.drawRect(0, 0, width, height);
				g.endFill();
				this.addElement(cont);
				
				this.mask = cont;
				
				NativeApplication.nativeApplication.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, true);
			}
			
			/**
			 * Reloads the swf from disk.
			 * 
			 */
			public function refresh():void {
				swfLoader.unloadAndStop();
				var oldSource:String = _source;
				_source = null;
				source = oldSource;
				swfLoader.loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, handleLoadedSwfError);
			}
			
			/**
			 * Sets the current items background color.
			 * 
			 */
			public function setBackgroundColor(showGrid:Boolean, color:int):void {
				_backgroundColor = color;
				_showGrid = showGrid;
				updateView();
			}
			
			/**
			 * Sets the source swf file.
			 * 
			 */
			public function set source(url:String):void {
				if (_source == url) { return; }
				
				_source = url;
				swfLoader.loaderContext = new LoaderContext(false);
				swfLoader.loaderContext.allowCodeImport = true;
				
				if (url) {
					var file:File = new File(url);
					
					if (file.exists == false) {
						var alert:Alert = Alert.show("Source file doesn't exist.", "Error");
						alert.validateNow();
						return;
					}
					
					var fs:FileStream = new FileStream();
					fs.open(file, FileMode.READ);
					
					var ba:ByteArray = new ByteArray();
					fs.readBytes(ba, 0, file.size);
					fs.close();
					
					swfLoader.load(ba);
				} else {
					_captureBounds = null;
					updateView();
					swfLoader.unloadAndStop();
				}
			}
			
			/**
			 * Gets the swfs current registration point.
			 * The registrationPoint is an optional movieclip placed in the loaded swf's root timeline
			 * it is used to define the registrationPoint for use in Easel.
			 * 
			 */
			public function get registrationPoint():Point {
				return _registrationPoint;
			}
			
			/**
			 * Updates the current animations frame.
			 * 
			 */
			public function gotoAndStop(frameNum:int):void {
				content.gotoAndStop(frameNum);
			}
			
			/**
			 * Plays the loaded swf's animation.
			 * 
			 */
			public function play():void {
				if (content) {
					content.play();
				}
			}
			
			/**
			 * Stops the loaded swf form playing.
			 * 
			 */
			public function stop():void {
				content.stop();
			}
			
			/**
			 * Gets the current frame, or -1 if no content exists.
			 * 
			 */
			public function get currentFrame():int {
				return content == null?-1:content.currentFrame;
			}
			
			/**
			 * Gets the total frames from the loaded content.
			 * 
			 */
			public function get totalFrames():int {
				return content == null?0:content.totalFrames;
			}
			
			/**
			 * UPdates the current capture baounds, and updates the view.
			 * 
			 */
			public function set captureBounds(bounds:Rectangle):void {
				_captureBounds = bounds.clone();
				
				updateView();
			}
			
			/**
			 * Returns the current capture bounds.
			 * 
			 */
			public function get captureBounds():Rectangle {
				return _captureBounds;
			}
			
			/**
			 * @private
			 * 
			 */
			public function get content():MovieClip {
				//Dispatch Error Event catch in Main
				return swfLoader.content as MovieClip;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleLoadedSwfError(event:UncaughtErrorEvent):void {
				event.preventDefault();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleResize():void {
				updateView();
				
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updateView():void {
				if (initialized ==  false) { return; }
				
				var g:Graphics = background.graphics;
				g.clear();
				
				if (_showGrid) {
					g.beginBitmapFill(alphaGridBitmap);
				} else {
					g.beginFill(_backgroundColor, 1);
				}
				
				g.drawRect(0,0, width,height);
				
				if (_captureBounds != null) {
					g.beginFill(0xffffff, .2);
					g.lineStyle(1, 0x0, 1, true);
					var displayBounds:Rectangle = _captureBounds.clone();
					displayBounds.inflate(1, 1); //Inflate by 1 so animation is within the preview.
					g.drawRect(displayBounds.x, displayBounds.y, displayBounds.width, displayBounds.height);
				}
				updateMask();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updateMask():void {
				var g:Graphics = maskContainer.graphics;
				g.clear();
				g.beginFill(0xFF0099, 1);
				g.drawRect(0,0, width, height);
				g.endFill();
			}
			
			/**
			 * Enable key controls for fine-tuned moving of the capture bounds.
			 * 
			 */
			protected function onKeyDown(event:KeyboardEvent):void {
				dragMode = null;
				if (_captureBounds == null) { return; }
				
				if (event.shiftKey) {
					switch (event.keyCode) {
						case Keyboard.LEFT:
							_captureBounds.width--; break;
						case Keyboard.RIGHT:
							_captureBounds.width++; break;
						case Keyboard.UP:
							_captureBounds.height--; break;
						case Keyboard.DOWN:
							_captureBounds.height++; break;
					}
				} else if (event.commandKey) {
					switch (event.keyCode) {
						case Keyboard.LEFT:
							_captureBounds.width--;
							_captureBounds.height--;
							break;
						case Keyboard.RIGHT:
							_captureBounds.width++;
							_captureBounds.height++;
							break;
					}
				} else {
					switch (event.keyCode) {
						case Keyboard.LEFT:
							_captureBounds.x--; break;
						case Keyboard.RIGHT:
							_captureBounds.x++; break;
						case Keyboard.UP:
							_captureBounds.y--; break;
						case Keyboard.DOWN:
							_captureBounds.y++; break;
					}
				}
				
				updateView();
				
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updatePosition():void {
				var newX:Number;
				var newY:Number;
				
				var newWidth:Number;
				var newHeight:Number;
				
				switch (dragMode) {
					case MOVE:
						newX = mouseX - dragOffset.x|0;
						newY = Math.max(mouseY - dragOffset.y, 0)|0;
						
						var requestedX:Number = !isNaN(newX)?newX:_captureBounds.x;
						var requestedY:Number = (!isNaN(newY)?newY:_captureBounds.y);
						
						_captureBounds.x = Math.max(0, Math.min(requestedX, width-_captureBounds.width));
						_captureBounds.y = Math.max(0, Math.min(requestedY, height-_captureBounds.height));
						break;
					case RESIZE:
						newWidth = Math.max(mouseX - resizeStartPoint.x, MIN_WIDTH);
						newHeight = Math.max(mouseY - resizeStartPoint.y, MIN_HEIGHT);
						
						_captureBounds.width = !isNaN(newWidth)?newWidth:_captureBounds.width;
						_captureBounds.height = !isNaN(newHeight)?newHeight:_captureBounds.height;
						break;
				}
				
				updateView();
				
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleMouseDown():void {
				if (cursorInResizeBounds()) {
					dragMode = RESIZE;
					resizeStartPoint.x = _captureBounds.x + (background.mouseX-(_captureBounds.x+_captureBounds.width));
					resizeStartPoint.y = _captureBounds.y + (background.mouseY-(_captureBounds.y+_captureBounds.height));
				} else if (cursorInCaptureBounds()) {
					dragMode = MOVE;
					dragOffset.x = background.mouseX - _captureBounds.x;
					dragOffset.y = background.mouseY - _captureBounds.y;
				} else {
					dragMode = null;
				}
				
				if (dragMode == null) {
					removeEventListener(MouseEvent.MOUSE_MOVE, handleMoveTransform);
				} else {
					addEventListener(MouseEvent.MOUSE_MOVE, handleMoveTransform);
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleMosueUp():void {
				removeEventListener(MouseEvent.MOUSE_MOVE, handleMoveTransform);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleMoveTransform(event:MouseEvent):void {
				updatePosition();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleMouseMove():void {
				if (cursorInResizeBounds()) {
					Mouse.cursor = MouseCursor.BUTTON;
				} else if (cursorInCaptureBounds()) {
					Mouse.cursor = MouseCursor.HAND;
				} else {
					Mouse.cursor = MouseCursor.AUTO;
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function cursorInCaptureBounds():Boolean {
				if (_captureBounds == null) { return false; }
				var x:Number = _captureBounds.x;
				var y:Number = _captureBounds.y;
				var w:Number = _captureBounds.width;
				var h:Number = _captureBounds.height;
				
				if (mouseX < x + w && mouseX > x && mouseY < y + h && mouseY > y) {
					return true;
				} else {
					return false;
				}
			}	
			
			/**
			 * @private
			 * 
			 */
			protected function cursorInResizeBounds():Boolean {
				if (_captureBounds == null) { return false; }
				
				var x:Number = _captureBounds.x;
				var y:Number = _captureBounds.y;
				var w:Number = _captureBounds.width;
				var h:Number = _captureBounds.height;
				
				if (mouseX < x + w && mouseX > w+x - 10
					&& mouseY < y + h && mouseY > h+y - 10
				) {
					return true;
				} else {
					return false;
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleSwfLoad():void {
				if (swfLoader.content is AVM1Movie) {
					Alert.show('Your SWF is not supported, please use a Flash 9 or greater swf.', 'Unsupported SWF');
					fileModel.deleteSelected();
					return;
				}
				
				if (!(swfLoader.content is MovieClip)) {
					Alert.show('Your SWF is not supported, please ensure target is a MovieClip.', 'Unsupported SWF');
					fileModel.deleteSelected();
					return;
				}
				
				if (content == null) { return; }
				
				var registrationPointClip:DisplayObject = content.getChildByName('registrationPoint');
				
				if (registrationPointClip) {
					registrationPointClip.visible = false;
					_registrationPoint = new Point(registrationPointClip.x, registrationPointClip.y);
				} else {
					_registrationPoint = null;
				}
				
				dispatchEvent(new CaptureEvent(CaptureEvent.SWF_INIT));
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleError():void {
				//Surpress
			}
			
		]]>
	</fx:Script>
	
	<mx:Canvas id="background" width="100%" height="100%"  mouseMove="handleMouseMove()" mouseDown="handleMouseDown()" mouseUp="handleMosueUp()" />
	<mx:SWFLoader id="swfLoader" securityError="handleError()" ioError="handleError()" mouseChildren="false" mouseEnabled="false" init="handleSwfLoad()" scaleContent="false" />
		
</s:SkinnableContainer>
