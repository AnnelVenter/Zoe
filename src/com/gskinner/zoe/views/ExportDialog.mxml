<?xml version="1.0" encoding="utf-8"?>
<!--
Zoë by gskinner.com.
Visit www.gskinner.com/blog for documentation, updates and more free code.

Copyright (c) 2010 Grant Skinner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->

<!---

	Used to display progress to the user while exporting a Sprite sheet and related data.

-->
<s:Panel width="450" height="235"
		 horizontalCenter="0" verticalCenter="0"
		 xmlns:fx="http://ns.adobe.com/mxml/2009" creationComplete="init(event)"
		 xmlns:s="library://ns.adobe.com/flex/spark" title="Export"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:controls="com.gskinner.controls.*"
		 skinClass="com.gskinner.skins.UpdateDialogSkin" xmlns:ui="com.gskinner.ui.*"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.gskinner.zoe.data.ExportType;
			import com.gskinner.zoe.data.SourceFileData;
			import com.gskinner.zoe.model.FileModel;
			
			import flash.net.navigateToURL;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			/**
			 * @private
			 * 
			 */
			protected static var instance:ExportDialog;
			
			/**
			 * @private
			 * 
			 */
			protected var model:FileModel;
			
			/**
			 * Displays this dialog to the user.
			 * 
			 */
			public static function show():void {
				instance = new ExportDialog();
				PopUpManager.addPopUp(instance, FlexGlobals.topLevelApplication as DisplayObject, true);
				PopUpManager.centerPopUp(instance);
			}
			
			/**
			 * When the SptiteSheet export is complete, this is called to update the ui correctly. 
			 * 
			 */
			public static function completeExport(model:FileModel, exportedImages:Array, result:Object):void {
				instance.model = model;
				
				instance.spinner.visible = false;
				instance.statusTxt.text = 'Complete';
				instance.openExportFolder.enabled = true;
				instance.deleteButton.enabled = true;
				instance.bottomControls.enabled = true;
				
				var results:Array = [];
				var selItem:SourceFileData = model.selectedItem;
				var name:String = selItem.name;
				
				results.push('All assets were exported to: <a href="event:' + unescapeMultiByte(selItem.destinationPath) + '">'+unescapeMultiByte(selItem.destinationPath)+'</a>');
				results.push('');
				
				//{json:jsonString, startFrames:startFrames, currentFrames:currentFrames, droppedFrames:framesDroppedCount}
				if (result) {
					results.push("SWF has:  " + result.startFrames + ' frames.');
					results.push("Dropped:  " + result.droppedFrames + ' similar frames.');
					results.push("Exported: " + result.currentFrames + ' frames.');
					results.push('');
				}
				
				switch (selItem.imageExportType) {
					case ExportType.IMAGE_SPRITE_SHEET:
						if (exportedImages.length == 1) {
							results.push('Sprite sheet exported as: ' + exportedImages[0]);
						} else {
							results.push('Multiple sprite sheets exported\: ' + exportedImages.join('<br>\t'));
							results.push("");
						}
						
						break;
					case ExportType.IMAGE_FRAME:
						results.push(model.swfCapture.totalFrames + ' frames were exported'); break;
				}
				
				switch (selItem.dataExportType) {
					case ExportType.DATA_JSON:
						results.push('JSON exported as: ' + name + '.json'); break;
				}
				
				
				var css:StyleSheet = new StyleSheet();
				css.setStyle("a:link", {color:"#0000FF"});
				css.setStyle("a:hover", {color:"#9999FF"});
				
				instance.outputText.styleSheet = css;
				instance.outputText.htmlText = unescapeMultiByte(results.join('<br>'));
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handelOpenExportFolder():void {
				var file:File = new File(model.selectedItem.destinationPath);
				file.openWithDefaultApplication();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleCloseWindow():void {
				PopUpManager.removePopUp(this);
			}
			
			protected function handleResultClick(event:TextEvent):void {
				//new File(event.text).openWithDefaultApplication();
				//navigateToURL(new URLRequest(event.text));
				handelOpenExportFolder();
			}
			
			protected function init(event:FlexEvent):void {
				
			}
			
		]]>
	</fx:Script>
	<s:Button id="deleteButton" styleName="deleteButton" enabled="false" top="-25" left="430" click="handleCloseWindow()" />
	<s:VGroup left="10" right="10" top="10" bottom="10" width="100%" height="100%" paddingBottom="0">
		<s:HGroup id="exportGroup">
			<s:Label id="statusTxt" text="Exporting…" />
			<ui:Spinner id="spinner" width="20" height="20" />
		</s:HGroup>
		<mx:TextArea id="outputText" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" 
					 width="100%" height="100%" link="handleResultClick(event);" />
		
		<!--
		<s:TextArea id="outputText"
					paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" 
					width="100%" height="100%"
					/>
		-->
		<s:HGroup width="100%" id="bottomControls" enabled="false">
			<s:Button id="openExportFolder" styleName="simpleButton" label="Open export folder" click="handelOpenExportFolder()" />
			<mx:Spacer width="100%" />
			<s:Button id="closeBtn" label="Close" styleName="simpleButton" click="handleCloseWindow()" />
		</s:HGroup>
	</s:VGroup>
</s:Panel>
